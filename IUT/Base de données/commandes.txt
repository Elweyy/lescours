SELECT To_char(To_date('25/01/1990','DD/MM/RRRR'),'day') AS "jour de naissance" , Round(SYSDATE-To_Date('25/01/1990', 'DD/MM/RRRR')) AS "Jours vécus"  
FROM dual 



SELECT TO_CHAR(salary, '99,999.00€') SALARY  , last_name 
FROM   employees 
?????????? en  €????????????



SELECT sum(salary) AS "Masse salariale mensuelle", Sum(salary)*12 AS "Masse salariale annuelle", Max(salary) AS "Salaire le plus haut", Min(salary) AS "Salaire le plus bas", Round(Avg(salary)) AS "Salaire moyen", Max(salary) - Min(salary)AS "Différence de salaire"
FROM   employees 



SELECT Count(employee_id)
FROM   employees                           = 107



SELECT Count(*)                                                                   => Permet de savoir s'il y a des nulls dans la colonne
FROM   employees                           = 107 car pas de valeurs null                   



select avg(salary)
from employees                               => calcule la moyenne du salaire des employées
where salary is not null




SELECT department_id, sum(salary) AS "Masse salariale mensuelle"
FROM   employees
GROUP BY department_id
ORDER BY department_id




SELECT To_Char(hire_date, 'RRRR') AS "date embauche", sum(salary) AS "Masse salariale mensuelle"
FROM   employees
GROUP BY To_Char(hire_date, 'RRRR')
ORDER BY To_Char(hire_date, 'RRRR')



SELECT department_id, sum(salary) AS "Masse salariale mensuelle"
FROM   employees
GROUP BY department_id
HAVING department_id > 50
ORDER BY department_id




SELECT salary, last_name
FROM employees
WHERE salary > 12000
ORDER BY salary desc



SELECT last_name, first_name, department_id
FROM employees
WHERE employee_id = 176



SELECT last_name, salary
FROM employees
WHERE salary<5000 or salary>12000
ORDER BY salary DESC



SELECT last_name, first_name, job_id, hire_date
FROM employees
WHERE Upper(last_name) = 'TAYLOR' OR Upper(last_name) = 'MATOS'
ORDER BY hire_date



SELECT last_name, first_name, job_id, hire_date
FROM employees
WHERE Upper(last_name) IN ('TAYLOR','MATOS')
ORDER BY hire_date



SELECT SYSDATE AS "date"
FROM dual




SELECT employee_id, last_name, salary, Round(salary*1.15,0) AS "new salary"
FROM employees




SELECT last_name
FROM employees
WHERE Upper(last_name) LIKE 'J%' OR Upper(last_name) LIKE 'A%' OR Upper(last_name) LIKE 'M%'
ORDER BY last_name




SELECT last_name , Length(last_name) AS "Longueur nom"
FROM employees
WHERE SubStr (Upper(last_name), 1, 1) IN ('J','A','M')
ORDER BY last_name



SELECT Count(employees.employee_id)AS "nombre employees", departments.department_name "nom departement"
FROM   employees , departments 
WHERE  employees.department_id = departments.department_id
GROUP BY  departments.department_name
ORDER BY Count(employees.employee_id)  desc




SELECT Count(e.employee_id), d.department_name
FROM   employees e , departments d
WHERE  e.department_id = d.department_id
GROUP BY  d.department_name
ORDER BY d.department_name




SELECT Count(e.employee_id) AS "nombre employés", r.region_name AS "région"
FROM employees e, departments d, locations l, countries c, regions r
WHERE e.department_id = d.department_id 
and d.location_id = l.location_id 
AND l.country_id = c.country_id 
AND c.region_id = r.region_id
GROUP BY r.region_name



SELECT Nvl(man.last_name, 'Personne') ||' manage '|| emp.last_name AS "QUi MANAGE qui?"
FROM employees man, employees emp
WHERE emp.manager_id = man.manager_id(+)




SELECT Count(e.employee_id) AS "nombre employés", d.department_name AS "nom département"
FROM   employees e , departments d
WHERE  e.department_id(+) = d.department_id
GROUP BY  d.department_name
ORDER BY d.department_name



SELECT last_name AS "nom de famille", To_Char(hire_date,'DD/MM/RRRR') AS "date embauche",Round((Months_Between(SYSDATE,hire_date))) AS "Mois d_ancienneté"
FROM employees emp
ORDER BY  3 desc



SELECT Min(emp.salary), Max(emp.salary), Avg(emp.salary), job.job_id
FROM  employees emp, jobs job
WHERE emp.job_id(+) = job.job_id
GROUP BY job.job_id



SELECT job.job_title AS "nom du job", Count(emp.employee_id) AS "nombre employés"
FROM employees emp, jobs job
WHERE emp.job_id = job.job_id
GROUP BY job.job_title
ORDER BY 2   DESC



SELECT Nvl(manager_id,50000), Min(salary) 
FROM  employees
GROUP BY manager_id
HAVING Min(salary) > 6000



SELECT  Count(employee_id) AS "nombre employés", To_Char(hire_date,'YYYY') AS "année embauche"
FROM  employees
WHERE To_Char(hire_date,'YYYY')='1995' 
OR To_Char(hire_date,'YYYY')='1996' 
OR To_Char(hire_date,'YYYY')='1997' 
OR To_Char(hire_date,'YYYY')='1998' 
GROUP BY  To_Char(hire_date,'YYYY')
ORDER BY 2 desc



SELECT emp1.last_name||' '||emp1.first_name AS "Nom prénom", emp1.salary
FROM employees emp1
WHERE 3 > (SELECT Count(*)
FROM employees emp2
WHERE emp2.salary > emp1.salary
AND emp2.employee_id <> emp1.employee_id)



SELECT *
FROM(SELECT * FROM employees ORDER BY salary DESC)
WHERE ROWNUM < 4



SELECT Count(e.employee_id) AS "nombre employes" , d.department_name
FROM  departments d,  employees e
WHERE  d.department_id = e.department_id (+)
GROUP BY d.department_name
ORDER BY Count(e.employee_id) DESC



SELECT last_name
FROM employees
WHERE salary > 
               (SELECT salary
               FROM employees
               WHERE last_name = 'Abel')
ORDER BY salary desc




SELECT e.last_name, e.first_name, e.department_id, e.salary,
        (SELECT trunc(Avg(salary))
                FROM employees e2
                WHERE e.department_id=e2.department_id)  SAL_MOY
FROM employees e
WHERE e.salary > any
               (SELECT Avg(salary)
                FROM employees e2
                WHERE e.department_id=e2.department_id)
ORDER BY department_id ;




SELECT emp.last_name 
FROM employees emp
WHERE emp.salary > 3000
AND emp.department_id = 10;

===================== (à savoir pour le DS)

SELECT employee_id
FROM employees
WHERE salary > 3000                                      => Première requete mene la danse (si alias par exemple)
intersect
SELECT   employee_id
FROM employees
WHERE department_id = 10;






créer un état qui affiche le numéro  le nom de tous les employés qui gagnent plus que le salaire moyen.
Trier les résultats par ordre croissant de salaire.

SELECT  employee_id, last_name
FROM employees
WHERE salary > (SELECT Avg(salary)
                FROM employees)
ORDER BY salary; 




affiche le numéro et le nom de tous les employées qui travaillent dans un département dans lequel travaille nimporte
quel employé dont le nom contient la lettre u

SELECT employee_id, last_name
FROM employees
WHERE department_id in
                       (SELECT department_id
                        FROM employees
                        WHERE Lower(last_name) like '%u%');





etat qui affiche nom departement, nom et id du poste de chaque employée du departement executive

SELECT emp.department_id, job.job_title,emp.last_name, emp.job_id
FROM employees emp, departments dep, jobs job
WHERE emp.department_id (+) = dep.department_id
AND job.job_id = emp.job_id
AND Lower(dep.department_name) = 'executive'; 





id des departements qui ne continennt pas lID de poste ST_CLERK


SELECT d.department_id, d.department_name
FROM departments d

MINUS

SELECT distinct dep.department_id, dep.department_name
FROM departments dep, employees emp 
WHERE dep.department_id = emp.department_id
AND Upper(emp.job_id) = 'ST_CLERK' 



------------------------------------------------------------------------------------------------------
Pour définir la clé primaire qu'elle soit composée ou non (à la fin de la définition de la table)
CONSTRAINT emp_emp_id_pk PRIMARY KEY (EMPLOYEE_ID));
------------------------------------------------------------------------------------------------------


SELECT dep.department_name AS "nom departement", Round(Avg(emp.salary)) AS "salaire moyen"
FROM employees emp, departments dep
WHERE emp.department_id (+) = dep.department_id
GROUP BY dep.department_name
HAVING  Avg(emp.salary) > 5000
ORDER BY 2

SELECT emp.department_id AS "num departement", Round(Avg(emp.salary)) AS "salaire moyen"
FROM employees emp
GROUP BY department_id
HAVING  Avg(salary) > 5000
ORDER BY 1 


DESCRIBE REGIONS


SELECT *
FROM EMP_DETAILS_VIEW
WHERE salary > 9000
ORDER BY employee_id


CREATE TABLE sauvegarde_employees
AS SELECT * FROM employees


SELECT *
FROM sauvegarde_employees

DROP TABLE sauvegarde_employees



CREATE VIEW nomdep1
AS SELECT dep.department_name AS "nom departement", Count(emp.employee_id) AS "nb employees"
   FROM departments dep, employees emp
   WHERE dep.department_id = emp.department_id (+)
   GROUP BY dep.department_name
   
 

SELECT *
FROM nomdep1
ORDER BY 2 desc


SELECT employee_id AS "numero employee", last_name AS "nom", salary AS "salaire mensuel", Round((SELECT(Avg(salary))
                                                                                                 FROM employees), 2) AS "salaire moyen"
FROM employees
where salary > (SELECT Avg(salary)
                FROM employees)
ORDER BY salary



SELECT cou.country_name, cou.country_id
FROM countries cou

MINUS

SELECT cou.country_name, cou.country_id
FROM countries cou, locations loc, departments dep
WHERE cou.country_id =loc.country_id
and loc.location_id=dep.location_id  

ORDER BY country_name ;


 SELECT job_id, department_id, case 
                                   when department_id = 10 then 1 
                                   WHEN department_id = 50 THEN 2
                                   WHEN department_id = 20 THEN 3
                                   end
 FROM employees 

intersect

 SELECT job_id, department_id, case 
                                   when department_id = 10 then 1 
                                   WHEN department_id = 50 THEN 2
                                   WHEN department_id = 20 THEN 3
                                   end
 FROM employees 
 WHERE department_id = 10 OR department_id = 50 OR department_id = 20

ORDER BY 3 ;



GLGLGLGLGLGLGLGLGLG "Afficher les noms des employées par nom de departement

DECLARE
  CURSOR CURSOR_dep IS
    SELECT department_name, department_id
    FROM departments dep
    ORDER BY department_name ASC ;

  CURSOR cursoremp 
    (p_department_id employees.department_id%TYPE) IS
    SELECT Upper(last_name) name
    FROM employees
    WHERE department_id = p_department_id
    ORDER BY last_name ASC;
    
BEGIN
  FOR cursor_dep_rec IN cursor_dep
    LOOP 
    Dbms_Output.put_line(cursor_dep_rec.department_name);   
    FOR cursoremp_rec IN cursoremp(CURSOR_dep_rec.department_id)
      LOOP
      Dbms_Output.put_line(Chr(9) || cursoremp_rec.name) ;
      END LOOP; 
    END LOOP;  
END; 

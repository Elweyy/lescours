class ThreadExecutionTest
!!!135953.java!!!	ThreadExecutionTest(inout classTest : Object, inout methode : Method, inout logs : Logs)
		this.classDeTest = classTest;
		this.methodeATester = methode;
		this.res = logs;
!!!136081.java!!!	run() : void
		// nom de la méthode
		String nom = methodeATester.getName();

		// on invoque la méthode
		try {
			methodeATester.invoke(this.classDeTest, new Object[0]);
			res.ajouterLog(new LogOk(nom));
		} catch (InvocationTargetException e) {
			// vient a cause d'un test echoue

			// voir l'exception interne
			Throwable exceptionInterne = e.getCause();
			// afin d'eviter les problemes dans le nouveau
			// rechargement de
			// classes
			// (les classes ne sont pas les memes et instance of ne
			// fonctionne
			// donc pas)
			String nomException = exceptionInterne.getClass()
					.getSimpleName();
			if (estTimeOut(nomException)) {
				// c'est une exception due a un test echoue
				res.ajouterLog(new LogTimeOut(exceptionInterne, nom));
			} else if (estEchec(nomException)) {
				// c'est une exception due a un test echoue
				res.ajouterLog(new LogEchec(exceptionInterne, nom));
			} else {
				res.ajouterLog(new LogErreur(exceptionInterne, nom));
			}

		} catch (IllegalAccessException e) {
			System.out
					.println("erreur importante de l'appli de test!!!");
			e.printStackTrace();
		} catch (IllegalArgumentException e) {
			System.out
					.println("erreur importante de l'appli de test!!!");
			e.printStackTrace();
		}

!!!136209.java!!!	estEchec(in nomException : String) : boolean
		return nomException.equals(LanceurTestException.class
				.getSimpleName());
!!!136337.java!!!	estTimeOut(in nomException : String) : boolean
		return nomException.equals(LanceurTimeOut.class
				.getSimpleName());
